# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Prod workflow

on:
  push:
    branches:
      - master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_USERNAME: thedoorknobster
  REPO: capeb2/riskevaluator-backend
  VERSION : "v1.0.0"
jobs:
  release:
    environment: PROD
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version_tag: ${{steps.versioning.outputs.version}}
      artifact_name: riskevaluator-backend-${{steps.versioning.outputs.version}}
      upload_url: ${{ steps.create_release.step_upload_url.upload_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Fetch all commits
          fetch-depth: 0

      - name: Semantic versioning
        id: versioning
        uses: PaulHatch/semantic-version@v4.0.2
        with:
          branch: master
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          format: "v${major}.${minor}.${patch}-prerelease${increment}"

      - name: Set up JDK 13
        uses: actions/setup-java@v1
        with:
          java-version: '13'

      - name: Build package
        id : build_id
        run: mvn -Drevision=${{steps.versioning.outputs.version}} clean package --batch-mode package --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Save Release Jar File for publish
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: |
                target/riskevaluator-backend-${{steps.versioning.outputs.version}}.jar
                Dockerfile


  publish_github:
    needs: release
    environment: PROD
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - name: print file structure
        run: |
          sudo apt-get install tree
          tree


      - name: Upload Release Asset
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./target/${{ needs.release.outputs.artifact_name }}.jar
          asset_name: ${{ needs.release.outputs.artifact_name }}.jar
          tag: ${{ needs.release.outputs.version_tag }}
          overwrite: true
          body: "This is my release text"

  publish_docker:
    needs: release
    environment: PROD
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - name : print file structure
        run: |
          sudo apt-get install tree
          tree


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.REPO }}:latest,${{ env.REPO }}:${{ needs.release.outputs.version_tag }}

  deploy_heroku:
    needs: publish_docker
    environment: PROD
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    steps:

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact

      # Heroku login
      - name: Heroku login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      # Push the Docker image to Heroku Container Registry
      - name: Publish to Dev environment
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          APP_NAME: ${{ secrets.HEROKU_APP }}
          V_HOST: ${{ secrets.DB_HOST }}
          V_PORT: ${{ secrets.DB_PORT }}
          V_NAME: ${{ secrets.DB_NAME }}
          V_USER: ${{ secrets.DB_USER }}
          V_PASSWORD: ${{ secrets.DB_PASSWORD }}

        run: |
          heroku config:set -a ${{ secrets.HEROKU_APP }} DB_HOST=${{ secrets.DB_HOST }}
          heroku config:set -a ${{ secrets.HEROKU_APP }} DB_PORT=${{ secrets.DB_PORT }}
          heroku config:set -a ${{ secrets.HEROKU_APP }} DB_NAME=${{ secrets.DB_NAME }}
          heroku config:set -a ${{ secrets.HEROKU_APP }} DB_USER=${{ secrets.DB_USER }}
          heroku config:set -a ${{ secrets.HEROKU_APP }} DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          heroku container:login
          heroku container:push web -a ${{ secrets.HEROKU_APP }}
          heroku container:release web -a ${{ secrets.HEROKU_APP }}